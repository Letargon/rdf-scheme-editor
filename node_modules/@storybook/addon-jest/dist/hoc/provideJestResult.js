"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("core-js/modules/es7.symbol.async-iterator");

require("core-js/modules/es6.symbol");

require("core-js/modules/es6.object.create");

require("core-js/modules/es6.object.set-prototype-of");

require("core-js/modules/es6.object.define-property");

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var provideTests = function provideTests(Component) {
  var _class, _temp;

  return _temp = _class =
  /*#__PURE__*/
  function (_React$Component) {
    _inherits(TestProvider, _React$Component);

    function TestProvider() {
      var _getPrototypeOf2;

      var _this;

      _classCallCheck(this, TestProvider);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(TestProvider)).call.apply(_getPrototypeOf2, [this].concat(args)));

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "state", {});

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onAddTests", function (_ref) {
        var kind = _ref.kind,
            storyName = _ref.storyName,
            tests = _ref.tests;

        _this.setState({
          kind: kind,
          storyName: storyName,
          tests: tests
        });
      });

      return _this;
    }

    _createClass(TestProvider, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this2 = this;

        var _this$props = this.props,
            channel = _this$props.channel,
            api = _this$props.api;
        this.stopListeningOnStory = api.onStory(function () {
          _this2.onAddTests({});
        });
        channel.on('storybook/tests/add_tests', this.onAddTests);
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        var channel = this.props.channel;

        if (this.stopListeningOnStory) {
          this.stopListeningOnStory();
        }

        channel.removeListener('storybook/tests/add_tests', this.onAddTests);
      }
    }, {
      key: "render",
      value: function render() {
        var active = this.props.active;
        return active ? _react.default.createElement(Component, this.state) : null;
      }
    }]);

    return TestProvider;
  }(_react.default.Component), _defineProperty(_class, "propTypes", {
    channel: _propTypes.default.shape({
      on: _propTypes.default.func,
      removeListener: _propTypes.default.func
    }).isRequired,
    api: _propTypes.default.shape({
      onStory: _propTypes.default.func
    }).isRequired,
    active: _propTypes.default.bool
  }), _defineProperty(_class, "defaultProps", {
    active: true
  }), _temp;
};

var _default = provideTests;
exports.default = _default;