{"ast":null,"code":"import _slicedToArray from \"/home/rashid/github/rdf-scheme-editor/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/rashid/github/rdf-scheme-editor/src/components/ElementsTreeAndDetailsTableContextProvider.js\";\nimport React, { useEffect, useState } from 'react';\nimport ElementsTreeAndDetailsTable from \"./ElementsTreeAndDetailsTable\";\nimport { ElementsTreeAndDetailsTableContext } from \"./ElementsTreeAndDetailsTableContext\"; // API search function\n\nfunction executeSparql(url, query, callback, onErr) {\n  var queryUrl = url + '?query=' + encodeURIComponent(query) + '&queryLn=sparql';\n  console.log(\"queryUrl=\", queryUrl);\n  return fetch(queryUrl, {\n    headers: {\n      Accept: 'application/sparql-results+json'\n    }\n  }).then(function (r) {\n    return r.json();\n  }).then(function (r) {\n    callback(r.results);\n  }).catch(function (error) {\n    onErr(error);\n    return [];\n  });\n}\n\nexport function ElementsTreeAndDetailsTableContextProvider(props) {\n  var url = props.url,\n      query = props.query,\n      detailsQuery = props.detailsQuery,\n      detailsColumns = props.detailsColumns,\n      rootElement = props.rootElement;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      elementsTreeData = _useState2[0],\n      setElementsTreeData = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      detailsData = _useState4[0],\n      setDetailsData = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      expandedKeys = _useState6[0],\n      setExpandedKeys = _useState6[1];\n\n  var _useState7 = useState(\"\"),\n      _useState8 = _slicedToArray(_useState7, 2),\n      searchValue = _useState8[0],\n      setSearchValue = _useState8[1];\n\n  var _useState9 = useState(true),\n      _useState10 = _slicedToArray(_useState9, 2),\n      autoExpandParent = _useState10[0],\n      setAutoExpandParent = _useState10[1]; // можно делать интернационализацию, можно узнавать выбранную локаль и выбирать rdf лейблы по локали\n  // const { t, i18n } = useTranslation();\n\n\n  useEffect(function () {\n    executeSparql(url, query, function (results) {\n      //console.log(\"results.bindings=\", results.bindings);\n      var nodeList = rootElement;\n      nodeList[0].children = results.bindings.map(function (item) {\n        return {\n          title: item.label ? item.label.value : item.type.value,\n          key: item.type.value\n        };\n      });\n      setElementsTreeData(nodeList);\n    }, function (error) {\n      console.error(error);\n    });\n  }, [url, query]);\n\n  var onTreeSelect = function onTreeSelect(selectedKeys, info) {\n    // console.log('onTreeSelect.info=', info);\n    // console.log('onTreeSelect.selectedKeys=', selectedKeys);\n    // console.log(rootElement);\n    var query = detailsQuery.replace(\"###\", selectedKeys[0]); //console.log('onTreeSelect.query=', query);\n\n    executeSparql(url, query, function (results) {\n      //console.log(\"results2.bindings=\", results.bindings);\n      var list = results.bindings.map(function (item, index) {\n        return {\n          pred: item.pred.value,\n          obj: item.obj.value,\n          key: index\n        };\n      });\n      setDetailsData(list);\n    }, function (error) {\n      console.error(error);\n    });\n  };\n\n  var getExpandedKeys = function getExpandedKeys(value, node, parentKey) {\n    var keys = [];\n\n    if (node.title.toLowerCase().indexOf(value) > -1) {\n      keys.push(parentKey);\n    }\n\n    node.children && node.children.forEach(function (child) {\n      keys = keys.concat(getExpandedKeys(value, child, node.key));\n    });\n    return keys;\n  };\n\n  var onSearchInputChanged = function onSearchInputChanged(e) {\n    var value = e.target.value.toLowerCase();\n    var expandedKeys = getExpandedKeys(value, rootElement[0], rootElement[0].key).filter(function (item, i, self) {\n      return item && self.indexOf(item) === i;\n    });\n    setAutoExpandParent(true);\n    setSearchValue(value);\n    setExpandedKeys(expandedKeys);\n  };\n\n  var onExpandKeys = function onExpandKeys(expandedKeys) {\n    setAutoExpandParent(false);\n    setExpandedKeys(expandedKeys);\n  };\n\n  var value = {\n    elementsTreeData: elementsTreeData,\n    onTreeSelect: onTreeSelect,\n    detailsColumns: detailsColumns,\n    detailsData: detailsData,\n    expandedKeys: expandedKeys,\n    onSearchInputChanged: onSearchInputChanged,\n    searchValue: searchValue,\n    onExpandKeys: onExpandKeys,\n    autoExpandParent: autoExpandParent\n  };\n  return React.createElement(ElementsTreeAndDetailsTableContext.Provider, {\n    value: value,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, props.children);\n}","map":{"version":3,"sources":["/home/rashid/github/rdf-scheme-editor/src/components/ElementsTreeAndDetailsTableContextProvider.js"],"names":["React","useEffect","useState","ElementsTreeAndDetailsTable","ElementsTreeAndDetailsTableContext","executeSparql","url","query","callback","onErr","queryUrl","encodeURIComponent","console","log","fetch","headers","Accept","then","r","json","results","catch","error","ElementsTreeAndDetailsTableContextProvider","props","detailsQuery","detailsColumns","rootElement","elementsTreeData","setElementsTreeData","detailsData","setDetailsData","expandedKeys","setExpandedKeys","searchValue","setSearchValue","autoExpandParent","setAutoExpandParent","nodeList","children","bindings","map","item","title","label","value","type","key","onTreeSelect","selectedKeys","info","replace","list","index","pred","obj","getExpandedKeys","node","parentKey","keys","toLowerCase","indexOf","push","forEach","child","concat","onSearchInputChanged","e","target","filter","i","self","onExpandKeys"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\n\nimport ElementsTreeAndDetailsTable from \"./ElementsTreeAndDetailsTable\";\nimport {ElementsTreeAndDetailsTableContext} from \"./ElementsTreeAndDetailsTableContext\";\n\n\n\n// API search function\nfunction executeSparql(url, query, callback, onErr) {\n  var queryUrl = url + '?query=' + encodeURIComponent(query) + '&queryLn=sparql';\n  console.log(\"queryUrl=\", queryUrl);\n\n  return fetch(queryUrl, \n    { \n      headers: {\n        Accept: 'application/sparql-results+json'\n      } \n    })\n    .then(r => r.json())\n    .then(r => {\n      callback(r.results);\n    })\n    .catch(error => {\n      onErr(error);\n      return [];\n    });\n}\n\n\nexport function ElementsTreeAndDetailsTableContextProvider(props) {\n  const {url, query, detailsQuery, detailsColumns, rootElement} = props;\n\n  const [elementsTreeData, setElementsTreeData] = useState([]);\n  const [detailsData, setDetailsData] = useState([]);\n  const [expandedKeys, setExpandedKeys] = useState([]);\n  const [searchValue, setSearchValue] = useState(\"\");\n  const [autoExpandParent, setAutoExpandParent] = useState(true);\n\n  // можно делать интернационализацию, можно узнавать выбранную локаль и выбирать rdf лейблы по локали\n  // const { t, i18n } = useTranslation();\n\n  useEffect(\n    () => {\n      executeSparql(url, query,\n        results => {\n          //console.log(\"results.bindings=\", results.bindings);\n          var nodeList = rootElement;\n          nodeList[0].children = results.bindings.map((item) => {\n            return({\n              title: (item.label ? item.label.value : item.type.value),\n              key: item.type.value\n            });\n          });\n          setElementsTreeData(nodeList);\n        },\n        error => {\n          console.error(error);\n        }\n      )\n    },\n    [url, query]\n  );\n\n  const onTreeSelect = (selectedKeys, info) => {\n      // console.log('onTreeSelect.info=', info);\n      // console.log('onTreeSelect.selectedKeys=', selectedKeys);\n      // console.log(rootElement);\n\n      var query = detailsQuery.replace(\"###\", selectedKeys[0]);\n      //console.log('onTreeSelect.query=', query);\n\n      executeSparql(url, query,\n        results => {\n          //console.log(\"results2.bindings=\", results.bindings);\n\n          var list = results.bindings.map((item, index) => {\n            return({\n              pred: item.pred.value,\n              obj: item.obj.value,\n              key: index\n            });\n          });\n          setDetailsData(list);\n        },\n        error => {\n          console.error(error);\n        }\n      )\n  }\n\n  const getExpandedKeys = (value, node, parentKey) => {\n    var keys = []\n    if (node.title.toLowerCase().indexOf(value) > -1) {\n      keys.push(parentKey);\n    }\n    node.children && node.children.forEach((child) => {\n      keys = keys.concat(getExpandedKeys(value, child, node.key));\n    });\n    return keys;\n  }\n\n  const onSearchInputChanged = (e) => {\n    const value = e.target.value.toLowerCase();\n    const expandedKeys = getExpandedKeys(value, rootElement[0], rootElement[0].key)\n      .filter((item, i, self) => item && self.indexOf(item) === i);\n    setAutoExpandParent(true);\n    setSearchValue(value);\n    setExpandedKeys(expandedKeys);\n  }\n\n  const onExpandKeys = (expandedKeys) => {\n    setAutoExpandParent(false);\n    setExpandedKeys(expandedKeys);\n  }\n\n  const value = { elementsTreeData, onTreeSelect, \n                  detailsColumns, detailsData, \n                  expandedKeys, onSearchInputChanged, searchValue, onExpandKeys, autoExpandParent };\n\n  return <ElementsTreeAndDetailsTableContext.Provider value={value}>{props.children}</ElementsTreeAndDetailsTableContext.Provider>\n}\n\n"]},"metadata":{},"sourceType":"module"}