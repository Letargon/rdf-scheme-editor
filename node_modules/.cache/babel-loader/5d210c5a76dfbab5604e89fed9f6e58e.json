{"ast":null,"code":"var _jsxFileName = \"/home/rashid/github/rdf-scheme-editor/src/components/ElementsTreeAndDetailsTable.js\";\nimport React, { useContext } from \"react\"; //import PropTypes from 'prop-types';\n\nimport { Card, Input, Table, Tree } from \"antd\";\nimport \"antd/dist/antd.css\";\nimport SplitPane from \"react-split-pane\";\nimport { ElementsTreeAndDetailsTableContext } from \"./ElementsTreeAndDetailsTableContext\";\nvar TreeNode = Tree.TreeNode;\nvar Search = Input.Search; // все тестовые данные должны быть вынесены в Story и тут их быть не должно\n\nvar renderTreeNodes = function renderTreeNodes(data, searchValue) {\n  return data.map(function (item) {\n    var index = item.title.toLowerCase().indexOf(searchValue);\n    var beforeStr = item.title.substr(0, index);\n    var middleStr = item.title.substr(index, searchValue.length);\n    var afterStr = item.title.substr(index + searchValue.length);\n    var title = index > -1 ? React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    }, beforeStr, React.createElement(\"span\", {\n      style: {\n        color: '#f50'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }, middleStr), afterStr) : React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }, item.title);\n\n    if (item.children) {\n      return React.createElement(TreeNode, {\n        title: title,\n        key: item.key,\n        dataRef: item,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      }, renderTreeNodes(item.children, searchValue));\n    }\n\n    return React.createElement(TreeNode, {\n      title: title,\n      key: item.key,\n      isLeaf: item.isLeaf,\n      dataRef: item,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    });\n  });\n};\n\nvar divStyle = {\n  padding: \"5px\",\n  overflow: \"auto\"\n};\n\nvar ElementsTreeAndDetailsTable = function ElementsTreeAndDetailsTable(props) {\n  // это и есть все входные данные компонента из родительского контекста\n  // пропсы почти не используются\n  var _useContext = useContext(ElementsTreeAndDetailsTableContext),\n      elementsTreeData = _useContext.elementsTreeData,\n      onTreeSelect = _useContext.onTreeSelect,\n      detailsColumns = _useContext.detailsColumns,\n      detailsData = _useContext.detailsData,\n      expandedKeys = _useContext.expandedKeys,\n      searchValue = _useContext.searchValue,\n      onSearchInputChanged = _useContext.onSearchInputChanged,\n      onExpandKeys = _useContext.onExpandKeys,\n      autoExpandParent = _useContext.autoExpandParent;\n\n  return React.createElement(SplitPane, {\n    split: \"vertical\",\n    defaultSize: \"20%\",\n    style: {\n      position: \"relative\"\n    },\n    size: \"small\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    style: divStyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, React.createElement(Card, {\n    title: props.elementsHeader,\n    className: \"gx-card\",\n    size: \"small\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, React.createElement(Search, {\n    style: {\n      marginBottom: 8\n    },\n    size: \"small\",\n    placeholder: \"Search\",\n    onChange: onSearchInputChanged,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }), React.createElement(Tree, {\n    size: \"small\",\n    onSelect: onTreeSelect,\n    expandedKeys: expandedKeys,\n    onExpand: onExpandKeys,\n    autoExpandParent: autoExpandParent,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, elementsTreeData && renderTreeNodes(elementsTreeData, searchValue)))), React.createElement(\"div\", {\n    style: divStyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, React.createElement(Table, {\n    className: \"gx-table-responsive\",\n    bordered: true,\n    pagination: false,\n    size: \"small\",\n    title: function title() {\n      return React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, props.detailsHeader);\n    },\n    columns: detailsColumns,\n    dataSource: detailsData,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  })));\n}; // тут должны бы быть описаны пропстайпы\n// но с Hooks API хз как делать валидацию и надо ли ее делать\n\n/*ElementsTreeAndDetailsTable.propTypes = {\r\n  elementsTreeData: PropTypes.object.isRequired,\r\n  detailsColumns: PropTypes.object.isRequired,\r\n  detailsData: PropTypes.object.isRequired\r\n};\r\n\r\nElementsTreeAndDetailsTable.defaultProps = {\r\n  elementsTreeData: [{}],\r\n  detailsColumns: [{}],\r\n  detailsData: [{}]\r\n}*/\n\n\nexport default ElementsTreeAndDetailsTable;","map":{"version":3,"sources":["/home/rashid/github/rdf-scheme-editor/src/components/ElementsTreeAndDetailsTable.js"],"names":["React","useContext","Card","Input","Table","Tree","SplitPane","ElementsTreeAndDetailsTableContext","TreeNode","Search","renderTreeNodes","data","searchValue","map","item","index","title","toLowerCase","indexOf","beforeStr","substr","middleStr","length","afterStr","color","children","key","isLeaf","divStyle","padding","overflow","ElementsTreeAndDetailsTable","props","elementsTreeData","onTreeSelect","detailsColumns","detailsData","expandedKeys","onSearchInputChanged","onExpandKeys","autoExpandParent","position","elementsHeader","marginBottom","detailsHeader"],"mappings":"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","sourcesContent":["import React, { useContext } from \"react\";\r\n//import PropTypes from 'prop-types';\r\n\r\nimport {Card, Input, Table, Tree} from \"antd\";\r\nimport \"antd/dist/antd.css\";\r\nimport SplitPane from \"react-split-pane\";\r\n\r\nimport {ElementsTreeAndDetailsTableContext} from \"./ElementsTreeAndDetailsTableContext\";\r\n\r\nconst TreeNode = Tree.TreeNode;\r\nconst Search = Input.Search;\r\n\r\n// все тестовые данные должны быть вынесены в Story и тут их быть не должно\r\n\r\n\r\nconst renderTreeNodes = (data, searchValue) => data.map((item) => {\r\n  const index = item.title.toLowerCase().indexOf(searchValue);\r\n  const beforeStr = item.title.substr(0, index);\r\n  const middleStr = item.title.substr(index, searchValue.length);\r\n  const afterStr = item.title.substr(index + searchValue.length);\r\n  const title = index > -1 ? (\r\n    <span>\r\n      {beforeStr}\r\n      <span style={{color: '#f50'}}>{middleStr}</span>\r\n      {afterStr}\r\n    </span>\r\n  ) : <span>{item.title}</span>;\r\n\r\n  if (item.children) {\r\n    return (\r\n      <TreeNode title={title} key={item.key} dataRef={item}>\r\n        {renderTreeNodes(item.children, searchValue)}\r\n      </TreeNode>\r\n    );\r\n  }\r\n  return <TreeNode title={title} key={item.key} isLeaf={item.isLeaf} dataRef={item} />;\r\n})\r\n\r\n\r\nconst divStyle = {\r\n  padding: \"5px\",\r\n  overflow: \"auto\"\r\n};\r\n\r\nconst ElementsTreeAndDetailsTable = (props) => {\r\n  // это и есть все входные данные компонента из родительского контекста\r\n  // пропсы почти не используются\r\n  const { elementsTreeData, onTreeSelect, \r\n          detailsColumns, detailsData, \r\n          expandedKeys, searchValue, onSearchInputChanged, onExpandKeys, autoExpandParent } = useContext(ElementsTreeAndDetailsTableContext);\r\n\r\n  return (\r\n    <SplitPane split=\"vertical\" defaultSize=\"20%\" style={{position: \"relative\"}} size=\"small\">\r\n      <div style={divStyle}>\r\n        <Card title={props.elementsHeader} className=\"gx-card\" size=\"small\" >\r\n          <Search style={{marginBottom: 8}} size=\"small\" placeholder=\"Search\" onChange={onSearchInputChanged} />\r\n          <Tree size=\"small\" \r\n            onSelect={onTreeSelect}  \r\n            expandedKeys={expandedKeys}\r\n            onExpand={onExpandKeys}\r\n            autoExpandParent={autoExpandParent}>\r\n            {elementsTreeData && renderTreeNodes(elementsTreeData, searchValue)}\r\n          </Tree>\r\n        </Card>\r\n      </div>\r\n      <div style={divStyle}>\r\n        <Table className=\"gx-table-responsive\" bordered pagination={false} size=\"small\"\r\n          title={() => <b>{props.detailsHeader}</b>}\r\n          columns={detailsColumns} dataSource={detailsData} />\r\n      </div>\r\n    </SplitPane>\r\n  );\r\n};\r\n\r\n// тут должны бы быть описаны пропстайпы\r\n// но с Hooks API хз как делать валидацию и надо ли ее делать\r\n\r\n/*ElementsTreeAndDetailsTable.propTypes = {\r\n  elementsTreeData: PropTypes.object.isRequired,\r\n  detailsColumns: PropTypes.object.isRequired,\r\n  detailsData: PropTypes.object.isRequired\r\n};\r\n\r\nElementsTreeAndDetailsTable.defaultProps = {\r\n  elementsTreeData: [{}],\r\n  detailsColumns: [{}],\r\n  detailsData: [{}]\r\n}*/\r\n\r\nexport default ElementsTreeAndDetailsTable;\r\n"]},"metadata":{},"sourceType":"module"}