{"ast":null,"code":"import i18n from \"i18next\";\nimport { initReactI18next } from \"react-i18next\";\nimport XHR from 'i18next-xhr-backend';\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport moment from 'moment';\nimport translationEN from './i18n/en/translation';\nimport translationRU from './i18n/ru/translation'; // the translations\n\nvar resources = {\n  en: {\n    translation: translationEN\n  },\n  ru: {\n    translation: translationRU\n  }\n};\ni18n.use(XHR).use(LanguageDetector).use(initReactI18next) // passes i18n down to react-i18next\n.init({\n  whitelist: ['en', 'ru-RU'],\n  lng: \"ru\",\n  fallbackLng: 'en',\n  debug: true,\n  resources: resources,\n  interpolation: {\n    escapeValue: false // react already safes from xss\n\n  }\n}); // i18n.on('languageChanged', function(lng) {\n//   console.log('languageChanged', lng);\n//   if (lng.indexOf('ru') === 0) {\n//     require('moment/locale/ru');\n//     moment.locale('ru');\n//   } else {\n//     require('moment/locale/en-au');\n//     moment.locale('en');\n//   }\n// });\n\nexport default i18n;","map":{"version":3,"sources":["/home/rashid/github/rdf-scheme-editor/src/i18n.js"],"names":["i18n","initReactI18next","XHR","LanguageDetector","moment","translationEN","translationRU","resources","en","translation","ru","use","init","whitelist","lng","fallbackLng","debug","interpolation","escapeValue"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,SAAjB;AACA,SAASC,gBAAT,QAAiC,eAAjC;AACA,OAAOC,GAAP,MAAgB,qBAAhB;AACA,OAAOC,gBAAP,MAA6B,kCAA7B;AACA,OAAOC,MAAP,MAAmB,QAAnB;AAEA,OAAOC,aAAP,MAA0B,uBAA1B;AACA,OAAOC,aAAP,MAA0B,uBAA1B,C,CAEA;;AACA,IAAMC,SAAS,GAAG;AAChBC,EAAAA,EAAE,EAAE;AACFC,IAAAA,WAAW,EAAEJ;AADX,GADY;AAIhBK,EAAAA,EAAE,EAAE;AACFD,IAAAA,WAAW,EAAEH;AADX;AAJY,CAAlB;AASAN,IAAI,CACDW,GADH,CACOT,GADP,EAEGS,GAFH,CAEOR,gBAFP,EAGGQ,GAHH,CAGOV,gBAHP,EAGyB;AAHzB,CAIGW,IAJH,CAIQ;AACJC,EAAAA,SAAS,EAAE,CAAC,IAAD,EAAO,OAAP,CADP;AAEJC,EAAAA,GAAG,EAAE,IAFD;AAGJC,EAAAA,WAAW,EAAE,IAHT;AAIJC,EAAAA,KAAK,EAAE,IAJH;AAKJT,EAAAA,SAAS,EAATA,SALI;AAMJU,EAAAA,aAAa,EAAE;AACbC,IAAAA,WAAW,EAAE,KADA,CACM;;AADN;AANX,CAJR,E,CAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAelB,IAAf","sourcesContent":["import i18n from \"i18next\";\nimport { initReactI18next } from \"react-i18next\";\nimport XHR from 'i18next-xhr-backend';\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport moment from 'moment';\n\nimport translationEN from './i18n/en/translation';\nimport translationRU from './i18n/ru/translation';\n\n// the translations\nconst resources = {\n  en: {\n    translation: translationEN,\n  },\n  ru: {\n    translation: translationRU,\n  },\n};\n\ni18n\n  .use(XHR)\n  .use(LanguageDetector)\n  .use(initReactI18next) // passes i18n down to react-i18next\n  .init({\n    whitelist: ['en', 'ru-RU'],\n    lng: \"ru\",\n    fallbackLng: 'en',\n    debug: true,\n    resources,\n    interpolation: {\n      escapeValue: false // react already safes from xss\n    }\n  });\n\n// i18n.on('languageChanged', function(lng) {\n//   console.log('languageChanged', lng);\n//   if (lng.indexOf('ru') === 0) {\n//     require('moment/locale/ru');\n//     moment.locale('ru');\n//   } else {\n//     require('moment/locale/en-au');\n//     moment.locale('en');\n//   }\n// });\n\nexport default i18n;\n"]},"metadata":{},"sourceType":"module"}