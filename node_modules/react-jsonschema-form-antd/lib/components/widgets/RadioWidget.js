"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

require("antd/lib/radio/style/css");

require("antd/lib/row/style/css");

require("antd/lib/col/style/css");

var _antd = require("antd");

var _propTypes = require("prop-types");

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var RadioGroup = _antd.Radio.Group;

function RadioWidget(props) {
  var options = props.options,
      value = props.value,
      required = props.required,
      disabled = props.disabled,
      readonly = props.readonly,
      autofocus = props.autofocus,
      _onChange = props.onChange;
  // Generating a unique field name to identify this set of radio buttons

  var name = Math.random().toString();
  var enumOptions = options.enumOptions,
      inline = options.inline;
  // checked={checked} has been moved above name={name}, As mentioned in #349;
  // this is a temporary fix for radio button rendering bug in React, facebook/react#7630.

  return _react2.default.createElement(
    RadioGroup,
    {
      style: { width: "100%" },
      options: options,
      value: value,
      name: name,
      onChange: function onChange(e) {
        _onChange(e.target.value);
      } },
    _react2.default.createElement(
      _antd.Row,
      null,
      enumOptions.map(function (option, i) {
        var checked = option.value === value;
        var radio = _react2.default.createElement(
          _antd.Radio,
          {
            checked: checked,

            required: required,
            value: option.value,
            disabled: disabled || readonly,
            autoFocus: autofocus && i === 0,
            onChange: function onChange(_) {
              return _onChange(option.value);
            }
          },
          option.label
        );

        return inline ? _react2.default.createElement(
          "label",
          { key: i },
          radio
        ) : _react2.default.createElement(
          _antd.Col,
          { span: 8, key: i },
          _react2.default.createElement(
            "label",
            null,
            radio
          )
        );
      })
    )
  );
}

RadioWidget.defaultProps = {
  autofocus: false
};

if (process.env.NODE_ENV !== "production") {
  RadioWidget.propTypes = {
    schema: _propTypes2.default.object.isRequired,
    id: _propTypes2.default.string.isRequired,
    options: _propTypes2.default.shape({
      enumOptions: _propTypes2.default.array,
      inline: _propTypes2.default.bool
    }).isRequired,
    value: _propTypes2.default.any,
    required: _propTypes2.default.bool,
    disabled: _propTypes2.default.bool,
    readonly: _propTypes2.default.bool,
    autofocus: _propTypes2.default.bool,
    onChange: _propTypes2.default.func
  };
}
exports.default = RadioWidget;